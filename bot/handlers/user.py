from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from ..texts import *
from ..keyboards import *
from ..states import House
from ..dicts import *
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardBuilder
from aiogram.fsm.storage.base import StorageKey
from ..db.models import *
from ..db.database import *

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    username = message.from_user.username
    fullname = message.from_user.full_name
    user_tg_id = message.from_user.id
    if not await user_exists(user_tg_id):
        if username:
            await add_user(user_tg_id, username)
        else:
            await add_user(user_tg_id, fullname)
    await message.answer(text=start_message, parse_mode="HTML", reply_markup=start_keyboard, disable_web_page_preview=True)


@router.callback_query(F.data == "begin")
async def begin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=hello_message, reply_markup=house_types)

@router.callback_query(F.data == "examples")
async def examples(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîò –î–∞", callback_data="begin")],
        [InlineKeyboardButton(text="üîò –í—ã–π—Ç–∏", callback_data="begin")]
    ])
    await callback.message.edit_text(text=examples_message, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(lambda c: c.data in HOUSE_TYPES)
async def house(callback: CallbackQuery, state: FSMContext):
    await state.set_state(House.house_chosen)
    chosen_house_type, message_text = HOUSE_TYPES[callback.data]
    if callback.data == "undecided":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîò –î–∞", callback_data="yes_house")],
            [InlineKeyboardButton(text="üîò –í—ã–π—Ç–∏", callback_data="begin")],
        ])
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
    else:
        await callback.message.edit_text(text=message_text, reply_markup=house_choose)
    await state.update_data(house_chosen=chosen_house_type)

@router.callback_query(F.data == "yes_house")
async def square(callback:CallbackQuery, state:FSMContext):
    await state.set_state(House.house_square)
    await callback.message.edit_text(text="–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞?", reply_markup=house_square)

@router.callback_query(SquareCallback.filter())
async def plot(callback: CallbackQuery, callback_data: SquareCallback,state: FSMContext):
    await state.update_data(house_square=callback_data.size)
    await callback.message.edit_text(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?", reply_markup=house_plot)
    await state.set_state(House.plot)

@router.callback_query(PlotCallback.filter())
async def budget(callback:CallbackQuery, callback_data: PlotCallback, state: FSMContext):
    await state.update_data(plot=callback_data.availability)
    await callback.message.edit_text(text="–ö–∞–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç?", reply_markup=house_budget)
    await state.set_state(House.budget)

@router.callback_query(BudgetCallback.filter())
async def temp(callback: CallbackQuery, callback_data: BudgetCallback, state: FSMContext):
    await state.update_data(budget=callback_data.budget)
    await callback.message.edit_text(text="–°—Ä–æ–∫–∏:", reply_markup=house_temp)
    await state.set_state(House.temp)

@router.callback_query(TempCallback.filter())
async def comments(callback: CallbackQuery, callback_data: TempCallback, state: FSMContext):
    await state.update_data(temp=callback_data.temp)
    await callback.message.edit_text("–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?\n(–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=comment_keyboard)
    await state.set_state(House.comment)

@router.message(House.comment, F.text)
async def phone(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(House.phone)
    await message.answer(text=contacts_message, reply_markup=phone_keyboard)

@router.callback_query(House.comment, F.data == "skip")
async def skip_comm(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment=None)
    await state.set_state(House.phone)
    await callback.message.edit_text(text=contacts_message, reply_markup=phone_keyboard)

@router.message(House.phone)
async def name(message: Message, state: FSMContext):
    if message.text and message.text.startswith("8") and len(message.text) == 11 and message.text.isalnum:
        await state.update_data(phone=message.text)
    else:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8 –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 11 —Å–∏–º–≤–æ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ:", reply_markup=phone_keyboard)
        return
    
    await state.set_state(House.name)
    await message.answer("üßë –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@router.message(House.name)
async def final(message: Message, state: FSMContext):
    if message.text and message.text.isalpha():
        await state.update_data(name=message.text)
        data = await state.get_data()

        name = data.get("name")
        house_chosen = data.get("house_chosen")
        house_square = data.get("house_square")
        plot = data.get("plot")
        budget = data.get("budget")
        temp = data.get("temp")
        comment = data.get("comment", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
        phone = data.get("phone")

        username = message.from_user.username
        fullname = message.from_user.full_name
        user_tg_id = message.from_user.id
        user = await user_exists(user_tg_id)
        user_get = await get_user(user_tg_id)
        if not user and not user_get:
            if username:
                await add_user(user_tg_id, username)
            else:
                await add_user(user_tg_id, fullname)

        house_chosen = next((text for text, (_, _) in HOUSE_TYPES.items() if text == house_chosen), house_chosen)
        house_square = next((text for text, value in SQUARE_OPTS if value == house_square), house_square)
        plot = next((text for text, value in PLOT_OPTS if value == plot), plot)
        budget = next((text for text, value in BUDGET_OPTS if value == budget), budget)
        temp = next((text for text, value in TEMP_OPTS if value == temp), temp)

        await add_application(user_id=user_get.id, username_app=name, house_chosen = house_chosen, house_square = house_square, plot = plot, budget = budget, temp=temp, comment=comment, phone = phone)
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.\n–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\nüì∏ –ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:\nüëâ <a href='website-kzn.ru'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>", parse_mode="HTML", disable_web_page_preview=True)
        await state.clear()
    else:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑: ")
        return

@router.callback_query(BackCallback.filter())
async def go_back(callback: CallbackQuery, callback_data: BackCallback, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        await callback.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞!")
        return

    state_map = {
        "House:house_square": ("House:house_chosen", house_types, hello_message),
        "House:plot": ("House:house_square", house_square, "–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞?"),
        "House:budget": ("House:plot", house_plot, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?"),
        "House:temp": ("House:budget", house_budget, "–ö–∞–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç?"),
        "House:comment": ("House:temp", house_temp, "–°—Ä–æ–∫–∏:"),
        "House:phone": ("House:comment", comment_keyboard, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?\n(–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"),
    }
    prev_state, prev_keyboard, prev_message = state_map.get(current_state, (None, None, None))

    if prev_state:
        await state.set_state(prev_state)
        await callback.message.edit_text(text=prev_message, reply_markup=prev_keyboard)