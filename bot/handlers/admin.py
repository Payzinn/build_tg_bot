from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from ..texts import *
from ..keyboards import *
from ..states import House
from ..dicts import *
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardBuilder
from aiogram.fsm.storage.base import StorageKey
from ..db.models import *
from ..db.database import *
from ..config import *
import logging


admin = Router()

@admin.message(Command("admin"))
async def admin_start(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_LIST:
        await state.clear()
        await message.answer(text="–í—ã –≤ –∞–¥–º–∏–Ω–∫–µ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", parse_mode="HTML", reply_markup=admin_start_kb, disable_web_page_preview=True)

@admin.callback_query(ApplicationCallback.filter(F.application_id == 0))
async def admin_app(callback: CallbackQuery, callback_data: ApplicationCallback, state: FSMContext):
    if callback.from_user.id in ADMIN_LIST:
        status = callback_data.status
        page = callback_data.page
        offset = (page - 1) * 10
        applications, total = await get_applications(status=status, offset=offset)
        status_name = STATUS_MAP.get(status, status)
        
        if applications:
            kb = get_applications_kb(applications, status, page, total)
            await callback.message.edit_text(
                text=f"{status_name} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {(total + 9) // 10}):",
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text=f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status_name}",
                reply_markup=admin_start_kb
            )
        await state.update_data(current_status=status, current_page=page)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@admin.callback_query(ViewApplicationCallback.filter())
async def show_application_details(callback: CallbackQuery, callback_data: ViewApplicationCallback, state: FSMContext):
    if callback.from_user.id in ADMIN_LIST:
        application_id = callback_data.application_id
        async with async_session() as session:
            result = await session.execute(select(Application).where(Application.id == application_id))
            application = result.scalars().first()

        if application:
            user_contact = await get_user_contact_info(application.user_id)
            details = (
                f"üìÑ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{application.id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application.username_app}\n"
                f"üîó –ö–æ–Ω—Ç–∞–∫—Ç: {user_contact}\n"
                f"üè† –¢–∏–ø –¥–æ–º–∞: {application.house_chosen}\n"
                f"üìê –ü–ª–æ—â–∞–¥—å: {application.house_square}\n"
                f"üå≥ –£—á–∞—Å—Ç–æ–∫: {application.plot}\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {application.budget}\n"
                f"üïí –°—Ä–æ–∫–∏: {application.temp}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {application.comment or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}\n"
                f"üìå <b>–°—Ç–∞—Ç—É—Å: {STATUS_MAP.get(application.status, application.status)}</b>\n"
                f"üóì –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: {application.registration_time.strftime('%d.%m.%Y %H:%M:%S')}"
            )

            data = await state.get_data()
            current_status = data.get("current_status", callback_data.status)
            current_page = data.get("current_page", callback_data.page)

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å",
                            callback_data=UpdateApplicationStatusCallback(
                                status="accepted",
                                application_id=application_id,
                                page=current_page
                            ).pack()
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="–ù–∞–∑–∞–¥",
                            callback_data=ApplicationCallback(
                                status=current_status,
                                application_id=0,
                                page=current_page
                            ).pack()
                        )
                    ]
                ]
            )

            await callback.message.edit_text(text=details, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
        else:
            await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=admin_start_kb)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@admin.callback_query(UpdateApplicationStatusCallback.filter())
async def update_application_status(callback: CallbackQuery, callback_data: UpdateApplicationStatusCallback, state: FSMContext):

    if callback.from_user.id not in ADMIN_LIST:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    application_id = callback_data.application_id
    new_status = callback_data.status

    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(Application).where(Application.id == application_id)
            )
            application = result.scalars().first()

            if not application:
                await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if application.status == new_status:
                await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å.")
                return

            application.status = new_status
            await session.commit()

    await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")

    await show_application_details(
        callback,
        ViewApplicationCallback(
            application_id=application_id,
            page=callback_data.page,
            status=new_status
        ),
        state
    )